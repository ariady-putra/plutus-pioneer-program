import "bootstrap";
import "bootstrap/dist/css/bootstrap.min.css";
import "./bootstrap-datetimepicker.min.css";
import * as L from "lucid-cardano";

const vestingScript = {
  type: "PlutusV2",
  script:
    "590b30590b2d0100003232323322323233223232323232323233223233223232323232323232333222323232322323222323253353232323253355335323235002222222222222533533355301a12001321233001225335002210031001002502c25335333573466e3c0380040ec0e84d40b8004540b4010840ec40e4d401488009400440b04cd5ce2491f62656e65666963696172792773207369676e6174757265206d697373696e670002b15335323232350022235002223500522350022253335333501900b00600215335001153350051333501800b00300710361333501800b00300710361333501800b00300735500322222222222200533501433501635029350052200102d335015502802d123333333300122333573466e1c0080040bc0b8894cd4ccd5cd19b8700200102f02e101515335333573466e240080040bc0b8404c405088ccd5cd19b8800200102f02e22333573466e240080040bc0b888ccd5cd19b8900200102e02f22333573466e200080040b80bc894cd4ccd5cd19b8900200102f02e10011002225335333573466e240080040bc0b84008400440b04cd5ce248114646561646c696e65206e6f7420726561636865640002b102b135001220023333573466e1cd55cea80224000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd408c090d5d0a80619a8118121aba1500b33502302535742a014666aa04eeb94098d5d0a804999aa813bae502635742a01066a0460606ae85401cccd5409c0c5d69aba150063232323333573466e1cd55cea80124000466a0486464646666ae68cdc39aab9d5002480008cd40a8cd40edd69aba15002303e357426ae8940088c98c8100cd5ce02182101f09aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa0049000119a81499a81dbad35742a004607c6ae84d5d1280111931902019ab9c04304203e135573ca00226ea8004d5d09aba2500223263203c33573807e07c07426aae7940044dd50009aba1500533502375c6ae854010ccd5409c0b48004d5d0a801999aa813bae200135742a004605e6ae84d5d1280111931901c19ab9c03b03a036135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a008603e6ae84d5d1280211931901519ab9c02d02c0283333573466e1cd55ce9baa0054800080ac8c98c80a4cd5ce0160158139999ab9a3370e6aae7540192000233221233001003002375c6ae854018dd69aba135744a00c464c6405066ae700ac0a809840a44c98c809ccd5ce2490350543500029135573ca00226ea80044d55cf280089baa00132001355023221122253350011350032200122133350052200230040023335530071200100500400112223500222350032253335333500800700400215335003100110261025102612223232323253335006215333500621533350082130044984c00d261533350072130044984c00d26100d100b1533350072130044984c00d261533350062130044984c00d26100c1533350052100a100b100915333500521533350072130054984c011261533350062130054984c01126100c100a1533350062130054984c011261533350052130054984c01126100b2533350052153335007215333500721333500b00a002001161616100b153335006215333500621333500a009002001161616100a10092533350042153335006215333500621333500a009002001161616100a1533350052153335005213335009008002001161616100910082533350032153335005215333500521333500900800200116161610091533350042153335004213335008007002001161616100810072533350022153335004215333500421333500800700200116161610081533350032153335003213335007006002001161616100710061235001222222220071222003122200212220011221233001003002122123300100300212212330010030021232230023758002640026aa034446666aae7c004940288cd4024c010d5d080118019aba200201a232323333573466e1cd55cea80124000466442466002006004601c6ae854008c014d5d09aba2500223263201833573803603402c26aae7940044dd50009191919191999ab9a3370e6aae75401120002333322221233330010050040030023232323333573466e1cd55cea80124000466442466002006004602e6ae854008cd403c058d5d09aba2500223263201d33573804003e03626aae7940044dd50009aba150043335500875ca00e6ae85400cc8c8c8cccd5cd19b875001480108c84888c008010d5d09aab9e500323333573466e1d4009200223212223001004375c6ae84d55cf280211999ab9a3370ea00690001091100191931900f99ab9c02202101d01c01b135573aa00226ea8004d5d0a80119a805bae357426ae8940088c98c8064cd5ce00e00d80b89aba25001135744a00226aae7940044dd5000899aa800bae75a224464460046eac004c8004d5405c88c8cccd55cf80112804119a8039991091980080180118031aab9d5002300535573ca00460086ae8800c0604d5d080088910010910911980080200189119191999ab9a3370ea002900011a80398029aba135573ca00646666ae68cdc3a801240044a00e464c6402866ae7005c0580480444d55cea80089baa0011212230020031122001232323333573466e1d400520062321222230040053007357426aae79400c8cccd5cd19b875002480108c848888c008014c024d5d09aab9e500423333573466e1d400d20022321222230010053007357426aae7940148cccd5cd19b875004480008c848888c00c014dd71aba135573ca00c464c6402466ae7005405004003c0380344d55cea80089baa001232323333573466e1cd55cea80124000466442466002006004600a6ae854008dd69aba135744a004464c6401c66ae700440400304d55cf280089baa0012323333573466e1cd55cea800a400046eb8d5d09aab9e500223263200c33573801e01c01426ea80048c8c8c8c8c8cccd5cd19b8750014803084888888800c8cccd5cd19b875002480288488888880108cccd5cd19b875003480208cc8848888888cc004024020dd71aba15005375a6ae84d5d1280291999ab9a3370ea00890031199109111111198010048041bae35742a00e6eb8d5d09aba2500723333573466e1d40152004233221222222233006009008300c35742a0126eb8d5d09aba2500923333573466e1d40192002232122222223007008300d357426aae79402c8cccd5cd19b875007480008c848888888c014020c038d5d09aab9e500c23263201533573803002e02602402202001e01c01a26aae7540104d55cf280189aab9e5002135573ca00226ea80048c8c8c8c8cccd5cd19b875001480088ccc888488ccc00401401000cdd69aba15004375a6ae85400cdd69aba135744a00646666ae68cdc3a80124000464244600400660106ae84d55cf280311931900719ab9c01101000c00b135573aa00626ae8940044d55cf280089baa001232323333573466e1d400520022321223001003375c6ae84d55cf280191999ab9a3370ea004900011909118010019bae357426aae7940108c98c802ccd5ce00700680480409aab9d50011375400224464646666ae68cdc3a800a40084a00c46666ae68cdc3a8012400446a010600c6ae84d55cf280211999ab9a3370ea00690001091100111931900619ab9c00f00e00a009008135573aa00226ea8004484888c00c010448880048c8cccd5cd19b8750014800880188cccd5cd19b8750024800080188c98c8018cd5ce00480400200189aab9d37540029309100109100089000a490350543100112323001001223300330020020011",
};

const VestingDatum = L.Data.Object({
  beneficiary: L.Data.String,
  deadline: L.Data.BigInt,
});

function removeChildren(elt) {
  while (elt.firstChild) {
    elt.removeChild(elt.lastChild);
  }
}

async function loadCardano() {
  const nami = window.cardano.nami;
  if (!nami) {
    setTimeout(loadCardano);
  } else {
    const api = await nami.enable();
    console.log("nami enabled");
    console.log("Blockfrost PID: " + process.env.BLOCKFROST_PID);
    const lucid = await L.Lucid.new(
      new L.Blockfrost(
        "https://cardano-preview.blockfrost.io/api/v0",
        process.env.BLOCKFROST_PID
      ),
      "Preview"
    );
    console.log("lucid active");
    lucid.selectWallet(api);
    return lucid;
  }
}

async function submitCardanoTx(signedTx) {
  const tid = await signedTx.submit();
  console.log("Cardano tx submitted: " + tid);
  addLinkToTable(
    "cardanoTxTable",
    "https://preview.cardanoscan.io/transaction/" + tid,
    tid
  );
}

async function signAndSubmitCardanoTx(tx) {
  try {
    const signedTx = await tx.sign().complete();
    await submitCardanoTx(signedTx);
  } catch (err) {
    alert(`Cardano transaction:\ninfo: ${err.info}\nmessage: ${err.message}`);
    throw err;
  }
}

async function getCardanoPKH() {
  const addr = await lucid.wallet.address();
  const details = await L.getAddressDetails(addr);
  return details.paymentCredential.hash;
}

async function getStatus() {
  const pkh = await getCardanoPKH();
  const utxos = await lucid.wallet.getUtxos();
  const lovelace = utxos.reduce((acc, utxo) => acc + utxo.assets.lovelace, 0n);

  const vestings = await vestingUTxOs();

  return {
    cardanoPKH: pkh,
    cardanoBalance: lovelace,
    vestingUTxOs: vestings,
  };
}

function addCell(tr, content) {
  const td = document.createElement("td");
  tr.appendChild(td);
  td.appendChild(document.createTextNode(content));
}

function addLinkToTable(tableId, href, text) {
  const txTable = document.getElementById("cardanoTxTable");
  const tr = document.createElement("tr");
  txTable.appendChild(tr);
  const td = document.createElement("td");
  tr.appendChild(td);
  const a = document.createElement("a");
  td.appendChild(a);
  a.setAttribute("href", href);
  a.setAttribute("target", "_blank");
  a.appendChild(document.createTextNode(text));
}

function addCopyCell(row, text) {
  const td = document.createElement("td");
  row.appendChild(td);
  const span = document.createElement("span");
  td.appendChild(span);
  const uid = String(Math.random()).slice(2);
  span.setAttribute("id", uid);
  span.appendChild(document.createTextNode(text));
  const button = document.createElement("button");
  td.appendChild(button);
  button.setAttribute("type", "button");
  button.classList.add("btn");
  button.classList.add("btn-outline-primary");
  button.classList.add("btn-sm");
  button.addEventListener("click", () => onCopy(uid));
}

async function setStatus() {
  const status = await getStatus();

  const cardanoPKH = document.getElementById("cardanoPKH");
  removeChildren(cardanoPKH);
  cardanoPKH.appendChild(document.createTextNode(status.cardanoPKH));

  const cardanoBalance = document.getElementById("cardanoBalance");
  const ada = Number(status.cardanoBalance) / 1000000;
  removeChildren(cardanoBalance);
  cardanoBalance.appendChild(document.createTextNode(ada));

  const vestingUTxOsTable = document.getElementById("vestingUTxOsTable");
  removeChildren(vestingUTxOsTable);
  for (const x of status.vestingUTxOs) {
    const tr = document.createElement("tr");
    vestingUTxOsTable.appendChild(tr);

    addCopyCell(tr, x.utxo.txHash + "#" + x.utxo.outputIndex);
    addCopyCell(tr, x.datum.beneficiary);
    addCell(tr, x.utxo.assets.lovelace);
    addCell(tr, new Date(Number(x.datum.deadline)));
  }
}

async function vestingUTxOs() {
  const utxos = await lucid.utxosAt(vestingAddress);
  const res = [];
  for (const utxo of utxos) {
    const datum = utxo.datum;
    if (datum) {
      try {
        const d = L.Data.from(datum, VestingDatum);
        res.push({
          utxo: utxo,
          datum: d,
        });
      } catch (err) {}
    }
  }
  return res;
}

async function findUTxO(ref) {
  const chunks = ref.split("#");
  const tid = chunks[0];
  const ix = parseInt(chunks[1]);
  const utxos = await vestingUTxOs();
  for (const utxo of utxos) {
    if (utxo.utxo.txHash == tid && utxo.utxo.outputIndex == ix) {
      return utxo;
    }
  }
  return null;
}

function getPKH(wallet) {
  switch (wallet) {
    case "Nami":
      return process.env.NAMI_PKH;
    case "Eternl":
      return process.env.ETNL_PKH;
    default:
      return "";
  }
}

const misteryScript = {
  type: "PlutusV2",
  script:
    "590ba1590b9e010000323232332232323332223232323232323233223233223232323232333222323232323232323232322323232223232533532323232325335533553353300e500235005222003133350105017335014335016502d0323350153502e35005222001032500110311032133573892012442656e69666963696172793120646964206e6f74207369676e206f7220746f206c6174650003110321533553353300e5002350052220021333501050173350143350163502e3370090011a80291100081919a80aa816019280088188819099ab9c49012842656e69666963696172793220646964206e6f74207369676e206f7220697320746f206561726c79000311355001222222222222005135001220023333573466e1cd55cea80224000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd409c0a0d5d0a80619a8138141aba1500b33502702935742a014666aa056eb940a8d5d0a804999aa815bae502a35742a01066a04e0686ae85401cccd540ac0d5d69aba150063232323333573466e1cd55cea80124000466a0486464646666ae68cdc39aab9d5002480008cd40a8cd40fdd69aba150023043357426ae8940088c98c8114cd5ce02402382189aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa0049000119a81499a81fbad35742a00460866ae84d5d1280111931902299ab9c048047043135573ca00226ea8004d5d09aba2500223263204133573808808607e26aae7940044dd50009aba1500533502775c6ae854010ccd540ac0c48004d5d0a801999aa815bae200135742a00460666ae84d5d1280111931901e99ab9c04003f03b135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00860466ae84d5d1280211931901799ab9c03203102d3333573466e1cd55ce9baa0054800080c08c98c80b8cd5ce0188180161999ab9a3370e6aae75401d2000233322212333001004003002375c6ae85401cdd71aba15006375a6ae84d5d1280311931901699ab9c03002f02b102e13263202c3357389201035054350002e135573ca00226ea80044d5d1280089aab9e500113754002446a004444444444444a66a666aa601e2400264246600244a66a004420062002004a0464a66a666ae68cdc780700081981909a8128008a812002108198818990009aa8131108911299a80089a80191000910999a802910011802001199aa98038900080280200089111a801111a801111a802911a801112999a999a8068058030010a99a8008a99a8028999a80600580180388160999a80600580180388160999a80600580180389111a801111a801912999a999a8040038020010a99a80188008814081388140911191919192999a80310a999a80310a999a80410980224c26006930a999a80390980224c2600693080888078a999a80390980224c26006930a999a80310980224c260069308080a999a80290807080788068a999a80290a999a803909802a4c26008930a999a803109802a4c2600893080808070a999a803109802a4c26008930a999a802909802a4c2600893080792999a80290a999a80390a999a80390999a8058050010008b0b0b08078a999a80310a999a80310999a8050048010008b0b0b0807080692999a80210a999a80310a999a80310999a8050048010008b0b0b08070a999a80290a999a80290999a8048040010008b0b0b0806880612999a80190a999a80290a999a80290999a8048040010008b0b0b08068a999a80210a999a80210999a8040038010008b0b0b0806080592999a80110a999a80210a999a80210999a8040038010008b0b0b08060a999a80190a999a80190999a8038030010008b0b0b08058805091a800911111110038910919800801801091091980080180109109198008018010891999999980091199ab9a3370e00400203c03a44a66a666ae68cdc380100080f00e88030a99a999ab9a3371200400203c03a2008200a44666ae68cdc400100080f00e91199ab9a3371200400203c03a44666ae68cdc480100080e80f11199ab9a3371000400203a03c44a66a666ae68cdc480100080f00e8800880111299a999ab9a3371200400203c03a200420022444006244400424440022464460046eb0004c8004d5406c88cccd55cf80092805119a80498021aba1002300335744004036464646666ae68cdc39aab9d5002480008cc8848cc00400c008c038d5d0a80118029aba135744a004464c6403266ae7007006c05c4d55cf280089baa0012323232323333573466e1cd55cea8022400046666444424666600200a0080060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008c05cd5d0a80119a80780b1aba135744a004464c6403c66ae700840800704d55cf280089baa00135742a008666aa010eb9401cd5d0a8019919191999ab9a3370ea0029002119091118010021aba135573ca00646666ae68cdc3a80124004464244460020086eb8d5d09aab9e500423333573466e1d400d20002122200323263202033573804604403c03a03826aae7540044dd50009aba1500233500b75c6ae84d5d1280111931900d19ab9c01d01c018135744a00226ae8940044d55cf280089baa0011335500175ceb44488c88c008dd5800990009aa80c11191999aab9f00225008233500733221233001003002300635573aa004600a6aae794008c010d5d100180c89aba100111220021221223300100400312232323333573466e1d400520002350073005357426aae79400c8cccd5cd19b875002480089401c8c98c8054cd5ce00c00b80980909aab9d5001137540022424460040062244002464646666ae68cdc3a800a400c46424444600800a600e6ae84d55cf280191999ab9a3370ea004900211909111180100298049aba135573ca00846666ae68cdc3a801a400446424444600200a600e6ae84d55cf280291999ab9a3370ea00890001190911118018029bae357426aae7940188c98c804ccd5ce00b00a80880800780709aab9d500113754002464646666ae68cdc39aab9d5002480008cc8848cc00400c008c014d5d0a8011bad357426ae8940088c98c803ccd5ce00900880689aab9e5001137540024646666ae68cdc39aab9d5001480008dd71aba135573ca004464c6401a66ae7004003c02c4dd5000919191919191999ab9a3370ea002900610911111100191999ab9a3370ea004900510911111100211999ab9a3370ea00690041199109111111198008048041bae35742a00a6eb4d5d09aba2500523333573466e1d40112006233221222222233002009008375c6ae85401cdd71aba135744a00e46666ae68cdc3a802a400846644244444446600c01201060186ae854024dd71aba135744a01246666ae68cdc3a8032400446424444444600e010601a6ae84d55cf280591999ab9a3370ea00e900011909111111180280418071aba135573ca018464c6402c66ae7006406005004c04804404003c0384d55cea80209aab9e5003135573ca00426aae7940044dd50009191919191999ab9a3370ea002900111999110911998008028020019bad35742a0086eb4d5d0a8019bad357426ae89400c8cccd5cd19b875002480008c8488c00800cc020d5d09aab9e500623263200f33573802402201a01826aae75400c4d5d1280089aab9e500113754002464646666ae68cdc3a800a400446424460020066eb8d5d09aab9e500323333573466e1d400920002321223002003375c6ae84d55cf280211931900619ab9c00f00e00a009135573aa00226ea8004488c8c8cccd5cd19b87500148010940188cccd5cd19b875002480088d4024c018d5d09aab9e500423333573466e1d400d20002500923263200d33573802001e01601401226aae7540044dd5000890911180180208911001089110009191999ab9a3370ea0029001100311999ab9a3370ea0049000100311931900319ab9c009008004003135573a6ea8005261220021220011200149010350543100112323001001223300330020020011",
};

const misteryDatum = L.Data.Object({
  beneficiary1: L.Data.String,
  beneficiary2: L.Data.String,
  deadline: L.Data.BigInt,
});

async function onW04H1() {
  const ownPKH = await getCardanoPKH();
  console.log("Own PKH: " + ownPKH);

  const beneficiaryOption1 = document.getElementById("w04h1Beneficiary1");
  const beneficiaryWallet1 = beneficiaryOption1.value;
  const beneficiary1 = getPKH(beneficiaryWallet1);

  const beneficiaryOption2 = document.getElementById("w04h1Beneficiary2");
  const beneficiaryWallet2 = beneficiaryOption2.value;
  const beneficiary2 = getPKH(beneficiaryWallet2);

  const amountText = document.getElementById("w04h1AmountText");
  const amount = BigInt(parseFloat(amountText.value) * 1_000_000);

  const deadlineText = document.getElementById("w04h1DeadlineText");
  const deadline = BigInt(Date.parse(deadlineText.value));

  console.log("Beneficiary 1: " + beneficiary1);
  console.log("Beneficiary 2: " + beneficiary2);

  const misteryAddress = lucid.utils.validatorToAddress(misteryScript);
  const d = {
    beneficiary1: beneficiary1,
    beneficiary2: beneficiary2,
    deadline: deadline,
  };
  const datum = L.Data.to(d, misteryDatum);
  const tx = await lucid
    .newTx()
    .payToContract(misteryAddress, { inline: datum }, { lovelace: amount })
    .complete();

  const signedTx = await tx.sign().complete();
  await submitCardanoTx(signedTx);

  beneficiaryOption1.selectedIndex = "0";
  beneficiaryOption2.selectedIndex = "0";
  amountText.value = "";
  deadlineText.value = "";
}

async function onVest() {
  const beneficiaryText = document.getElementById("vestBeneficiaryText");
  const beneficiaryAddress = beneficiaryText.value;
  const beneficiary = L.paymentCredentialOf(beneficiaryAddress).hash;
  const amountText = document.getElementById("vestAmountText");
  const amount = BigInt(parseInt(amountText.value));
  const deadlineText = document.getElementById("vestDeadlineText");
  const deadline = BigInt(Date.parse(deadlineText.value));

  const d = {
    beneficiary: beneficiary,
    deadline: deadline,
  };
  const datum = L.Data.to(d, VestingDatum);
  const tx = await lucid
    .newTx()
    .payToContract(vestingAddress, { inline: datum }, { lovelace: amount })
    .complete();
  signAndSubmitCardanoTx(tx);

  beneficiaryText.value = "";
  amountText.value = "";
  deadlineText.value = "";
}

async function onClaim() {
  const pkh = await getCardanoPKH();

  const referenceText = document.getElementById("claimReferenceText");
  const reference = referenceText.value;

  const utxo = await findUTxO(reference);
  if (utxo) {
    const tx = await lucid
      .newTx()
      .collectFrom([utxo.utxo], L.Data.to(new L.Constr(0, [])))
      .attachSpendingValidator(vestingScript)
      .addSignerKey(pkh)
      .validFrom(Number(utxo.datum.deadline))
      .complete();
    signAndSubmitCardanoTx(tx);
  } else {
    console.log("UTxO not found");
  }

  referenceText.value = "";
}

function onCopy(elt) {
  navigator.clipboard.writeText(
    document.getElementById(elt).firstChild.textContent
  );
}

window.L = L;
window.lucid = await loadCardano();
const vestingAddress = lucid.utils.validatorToAddress(vestingScript);

$(function () {
  $(".dtp").datetimepicker({
    minuteStep: 1,
    autoclose: true,
    format: "yyyy-mm-dd hh:ii",
  });
});

setStatus();
setInterval(setStatus, 5000);

document.getElementById("w04h1Button").addEventListener("click", onW04H1);

document.getElementById("vestButton").addEventListener("click", onVest);
document.getElementById("claimButton").addEventListener("click", onClaim);
document
  .getElementById("cardanoPKHButton")
  .addEventListener("click", () => onCopy("cardanoPKH"));
